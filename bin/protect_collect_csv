#!/usr/bin/env ruby

require 'awesome_print'
require 'protect_connect'
require 'logger'

results = []

servers = {
       gem: ProtectConnect::Server.new('gem'),
# protect1: ProtectConnect::Server.new('protect1')
}

log = Logger.new(STDOUT)

commands = {

    #
    # Config Data
    #
                db: 'q db f=d',
           dbspace: 'q dbspace f=d',
               log: 'q log f=d',
             nodes: 'q node f=d',
            domain: 'q do f=d',
         policyset: 'q pol f=d',
         mgmtclass: 'q mg f=d',
       bucopygroup: 'q copy f=d t=b',
       arcopygroup: 'q copy f=d t=a',
          devclass: 'q dev f=d',
           stgpool: 'q stgpool f=d',
           library: 'q library f=d',
             drive: 'q drive f=d',
            volume: 'q vol f=d',
         libvolume: 'q libv f=d',
              path: 'q path f=d',
               san: 'q san f=d',
          schedule: 'q sched f=d',
     adminschedule: 'q sched t=a f=d',
         occupancy: 'q occ',
         filespace: 'q file f=d',
          sessions: 'q sess f=d',
         processes: 'select * from processes',
    #
    # Incremental Data - Candidates for incremental extract
    #
           summary: 'select * from summary where start_time>=current_timestamp-(5)minute',
        volhistory: 'select * from volhistory where date_time>=current_timestamp-(5)minute',
       adminevents: 'q ev * t=a begint=-00:05 endt=now',
      clientevents: 'q ev * * begint=-00:05 endt=now',
            actlog: 'select * from actlog where date_time>=current_timestamp-(5)minute',
}

timestamp = Time.now.to_f

servers.each do |stanza,server|
  log.info "Collect for: #{stanza}"
  dir = "/home/ATS/rdavis/tsmdata/#{stanza}"
  FileUtils.mkdir_p(dir)
  commands.each do |key,command|
  file = "#{dir}/#{key}.#{timestamp}.csv"
    log.info "Command: '#{command}' to file: #{file}"
    result = server.exec(command)
    if result.data.first =~ /^ANR2034E/
      log.warn "Command: '#{command}' did not return results"
      next
    end
    out = result.to_csv.to_csv
    File.open(file,'w+'){ |f| f << out }
  end
end


